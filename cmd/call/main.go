package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"geth/contract/simswap"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/rpc"
	solsha3 "github.com/miguelmota/go-solidity-sha3"
	"github.com/pkg/errors"
	"io/ioutil"
	"math/big"
	"net/http"
	"strings"
)

const (
	expBase = 10
)

type Account struct {
	Nonce     string            `json:"nonce"`
	Code      string            `json:"code"`
	Balance   string            `json:"balance"`
	StateDiff map[string]string `json:"stateDiff"`
}

type OverrideAccounts map[common.Address]Account

type roundTripperExt struct {
	c          *http.Client
	appendData json.RawMessage
}

type reqMessage struct {
	JSONRPC string            `json:"jsonrpc"`
	ID      int               `json:"id"`
	Method  string            `json:"method"`
	Params  []json.RawMessage `json:"params"`
}

var (
	SimSwapAddress = common.HexToAddress("0x1111111111111111111111111111111111111100")
	MyWallet       = common.HexToAddress("0xef09879057a9ad798438f3ba561bcdd293d72fc7")
	Router         = common.HexToAddress("0x00555513Acf282B42882420E5e5bA87b44D8fA6E")

	DAIContract = common.HexToAddress("0x6b175474e89094c44da98b954eedeac495271d0f")
	KNCContract = common.HexToAddress("0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202")

	DAIBalanceOfSlot = "2"
	DAIAllowanceSlot = "3"
	KNCAllowanceSlot = "102"

	InputData = "0xabcffc2600000000000000000000000041684b361557e9282e0373ca51260d9331e518c90000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000006600000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce9720200000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000ef09879057a9ad798438f3ba561bcdd293d72fc70000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000578f7d31e55cb4fb000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000041684b361557e9282e0373ca51260d9331e518c900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202000000000000000000000000000000000000000000000000578f7d31e55cb4fb000000000000000000000000ef09879057a9ad798438f3ba561bcdd293d72fc70000000000000000000000000000000000000000000000000000000062f0d34300000000000000000000000000000000000000000000000000000000000003cc0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8c6a5032dc4bf638e15b4a66bc718ba7ba474ff730002000000000000000000040000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000061639d6ec06c13a96b5eb9560b359d7c648c7759000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202000000000000000000000000ef09879057a9ad798438f3ba561bcdd293d72fc7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000"
)

func InitCommonContract() *OverrideAccounts {
	indexDaiBalanceOf := getIndexBalanceOf(MyWallet.String(), DAIBalanceOfSlot)
	fmt.Println("indexDaiBalanceOf", indexDaiBalanceOf)

	indexDaiAllowance := getIndexAllowance(MyWallet.String(), SimSwapAddress.String(), DAIAllowanceSlot)
	fmt.Println("indexDaiAllowance", indexDaiAllowance)

	indexKncAllowance := getIndexAllowance(MyWallet.String(), SimSwapAddress.String(), KNCAllowanceSlot)
	fmt.Println("indexKncAllowance", indexKncAllowance)

	fakeBalance := "0x" + toHashString("0x3635C9ADC5DEA00000")
	fmt.Println("fakeBalance", fakeBalance)

	fakeAllowance := "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
	fmt.Println("fakeAllowance", fakeAllowance)

	return &OverrideAccounts{
		SimSwapAddress: {
			Nonce: "0x10",
			Code:  "0x6080604052600436106100295760003560e01c80637e5465ba1461002e57806396d274201461006b575b600080fd5b34801561003a57600080fd5b5061005560048036038101906100509190610691565b61009c565b60405161006291906106ea565b60405180910390f35b6100856004803603810190610080919061076a565b61015b565b6040516100939291906107f2565b60405180910390f35b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847f80000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016100fd92919061086f565b602060405180830381600087803b15801561011757600080fd5b505af115801561012b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014f91906108d0565b50600091505092915050565b6000806000879050600087905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101a391906108fd565b60206040518083038186803b1580156101bb57600080fd5b505afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610944565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161023091906108fd565b60206040518083038186803b15801561024857600080fd5b505afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102809190610944565b90503073ffffffffffffffffffffffffffffffffffffffff16637e5465ba8c8b6040518363ffffffff1660e01b81526004016102bd929190610971565b602060405180830381600087803b1580156102d757600080fd5b505af11580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610944565b5061035e8989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104a5565b5060008473ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161039a91906108fd565b60206040518083038186803b1580156103b257600080fd5b505afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190610944565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161042791906108fd565b60206040518083038186803b15801561043f57600080fd5b505afa158015610453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104779190610944565b9050818461048591906109c9565b9750828161049391906109c9565b96505050505050509550959350505050565b60606104ca8383604051806060016040528060278152602001610ba9602791396104d2565b905092915050565b60606104dd8461059f565b61051c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051390610a80565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516105449190610b1a565b600060405180830381855af49150503d806000811461057f576040519150601f19603f3d011682016040523d82523d6000602084013e610584565b606091505b50915091506105948282866105c2565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156105d257829050610622565b6000835111156105e55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106199190610b86565b60405180910390fd5b9392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061065e82610633565b9050919050565b61066e81610653565b811461067957600080fd5b50565b60008135905061068b81610665565b92915050565b600080604083850312156106a8576106a7610629565b5b60006106b68582860161067c565b92505060206106c78582860161067c565b9150509250929050565b6000819050919050565b6106e4816106d1565b82525050565b60006020820190506106ff60008301846106db565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261072a57610729610705565b5b8235905067ffffffffffffffff8111156107475761074661070a565b5b6020830191508360018202830111156107635761076261070f565b5b9250929050565b60008060008060006080868803121561078657610785610629565b5b60006107948882890161067c565b95505060206107a58882890161067c565b94505060406107b68882890161067c565b935050606086013567ffffffffffffffff8111156107d7576107d661062e565b5b6107e388828901610714565b92509250509295509295909350565b600060408201905061080760008301856106db565b61081460208301846106db565b9392505050565b61082481610653565b82525050565b6000819050919050565b6000819050919050565b600061085961085461084f8461082a565b610834565b6106d1565b9050919050565b6108698161083e565b82525050565b6000604082019050610884600083018561081b565b6108916020830184610860565b9392505050565b60008115159050919050565b6108ad81610898565b81146108b857600080fd5b50565b6000815190506108ca816108a4565b92915050565b6000602082840312156108e6576108e5610629565b5b60006108f4848285016108bb565b91505092915050565b6000602082019050610912600083018461081b565b92915050565b610921816106d1565b811461092c57600080fd5b50565b60008151905061093e81610918565b92915050565b60006020828403121561095a57610959610629565b5b60006109688482850161092f565b91505092915050565b6000604082019050610986600083018561081b565b610993602083018461081b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d4826106d1565b91506109df836106d1565b9250828210156109f2576109f161099a565b5b828203905092915050565b600082825260208201905092915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000610a6a6026836109fd565b9150610a7582610a0e565b604082019050919050565b60006020820190508181036000830152610a9981610a5d565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610ad4578082015181840152602081019050610ab9565b83811115610ae3576000848401525b50505050565b6000610af482610aa0565b610afe8185610aab565b9350610b0e818560208601610ab6565b80840191505092915050565b6000610b268284610ae9565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000610b5882610b31565b610b6281856109fd565b9350610b72818560208601610ab6565b610b7b81610b3c565b840191505092915050565b60006020820190508181036000830152610ba08184610b4d565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201e74bb36da108c35397957aa0989288025fc8bdbc1c0d732d8781ed620c6f2ea64736f6c63430008090033",
		},
		MyWallet: {
			Balance: "0x8ac7230489e80000",
		},
		DAIContract: {
			StateDiff: map[string]string{
				indexDaiBalanceOf.String(): fakeBalance,
				indexDaiAllowance.String(): fakeAllowance,
			},
		},
		KNCContract: {
			StateDiff: map[string]string{
				indexKncAllowance.String(): fakeAllowance,
			},
		},
	}
}

func main() {
	commonContract := InitCommonContract()
	// https://etherscan.io/tx/0x606e8c8084855d3fb20cb1c69f520d0a1feae6c35a9d3659a9cda8a1cf53e9e2#eventlog
	//rawurl := "https://proxy.kyberengineering.io/ethereum" // "http://localhost:8545/" //  "https://mainnet.infura.io/v3/3d85e3bded764846bc25e1ca36f73b91" // "https://proxy.kyberengineering.io/ethereum"
	rawurl := "http://localhost:8545/"
	client, err := ethclient.Dial(rawurl)
	if err != nil {
		panic(err)
	}

	block, err := client.BlockNumber(context.Background())
	if err != nil {
		panic(err)
	}
	fmt.Println("Block", block)

	// Generate EncodedSwapData
	simClient, err := NewClient(rawurl, SimSwapAddress, commonContract)
	if err != nil {
		panic(err)
	}
	ab, err := abi.JSON(bytes.NewBufferString(simswap.ContractMetaData.ABI))
	if err != nil {
		panic(err)
	}
	data, err := ab.Pack("simswap", DAIContract, KNCContract, Router, common.Hex2Bytes(InputData))
	if err != nil {
		panic(err)
	}
	msg := ethereum.CallMsg{
		From:      MyWallet,
		To:        &SimSwapAddress,
		Gas:       1000000,
		GasPrice:  FloatToTokenAmount(100, 9),
		GasFeeCap: FloatToTokenAmount(100, 9),
		GasTipCap: FloatToTokenAmount(100, 9),
		Value:     big.NewInt(0),
		Data:      data,
	}
	res, err := simClient.CallContract(context.Background(), msg, nil)
	if err != nil {
		panic(err)
	}
	fmt.Println(res)
}

func NewClient(rpcURL string, simAddress common.Address, commonContract *OverrideAccounts) (*ethclient.Client, error) {
	httpClient := http.DefaultClient

	sc, err := newSimClient(rpcURL, httpClient, commonContract)
	if err != nil {
		return nil, err
	}

	//simUtil, err := contract.NewSimCall(simAddress, sc)
	//if err != nil {
	//	return nil, errors.WithMessage(err, "create simUtil")
	//}

	return sc, nil
}

func newSimClient(url string, client *http.Client, commonContract *OverrideAccounts) (*ethclient.Client, error) {
	round, err := newRoundTripExt(client, commonContract)
	if err != nil {
		return nil, err
	}

	cc := &http.Client{Transport: round}
	r, err := rpc.DialHTTPWithClient(url, cc)
	if err != nil {
		return nil, errors.WithMessage(err, "simclient: dial rpc")
	}

	ethClient := ethclient.NewClient(r)

	return ethClient, nil
}

func newRoundTripExt(c *http.Client, accounts *OverrideAccounts) (http.RoundTripper, error) {
	data, err := json.Marshal(accounts)
	if err != nil {
		return nil, err
	}
	return &roundTripperExt{
		c:          c,
		appendData: data,
	}, nil
}

func (r roundTripperExt) RoundTrip(request *http.Request) (*http.Response, error) {
	// Trick: append Config OrderrideAcount to eth_call
	rt := request.Clone(context.Background())
	body, _ := ioutil.ReadAll(request.Body)
	_ = request.Body.Close()
	if len(body) > 0 {
		rt.Body = ioutil.NopCloser(bytes.NewBuffer(body))
		request.Body = ioutil.NopCloser(bytes.NewBuffer(body))
	}
	var req reqMessage
	if err := json.Unmarshal(body, &req); err == nil {
		/*
			req.Method == "eth_call" &&
			(bytes.Contains(req.Params[0], []byte(`0x99f9fbd2`)) ||
			bytes.Contains(req.Params[0], []byte(`0x110bb26c`)))
		*/
		if req.Method == "eth_call" {
			req.Params = append(req.Params, r.appendData)
		}
		d2, err := json.Marshal(req)
		if err != nil {
			panic(err)
		}
		rt.ContentLength = int64(len(d2))
		rt.Body = ioutil.NopCloser(bytes.NewBuffer(d2))
	}
	return r.c.Do(rt)
}

func FloatToTokenAmount(amount float64, decimals int64) *big.Int {
	weiFloat := big.NewFloat(amount)
	decimalsBigFloat := big.NewFloat(0).SetInt(Exp10(decimals))
	amountBig := new(big.Float).Mul(weiFloat, decimalsBigFloat)
	r, _ := amountBig.Int(nil)

	return r
}

// Exp10 ...
func Exp10(n int64) *big.Int {
	return new(big.Int).Exp(big.NewInt(expBase), big.NewInt(n), nil)
}

func toHashString(hexStr string) string {
	str := strings.Replace(hexStr, "0x", "", -1)
	str = strings.ToLower(str)
	return fmt.Sprintf("%064v", str)
}

func getIndexBalanceOf(owner string, slot string) common.Hash {
	slot = toHashString(slot)
	owner = toHashString(owner)

	index := solsha3.SoliditySHA3(
		// types
		[]string{"address", "uint256"},

		// values
		[]interface{}{
			owner,
			slot,
		},
	)
	return common.BytesToHash(index)
}

func getIndexAllowance(owner string, spender string, slot string) common.Hash {
	slot = toHashString(slot)
	owner = toHashString(owner)
	temp := solsha3.SoliditySHA3(
		// types
		[]string{"address", "uint256"},

		// values
		[]interface{}{
			owner,
			slot,
		},
	)
	tempStr := toHashString(common.BytesToHash(temp).String())
	spender = toHashString(spender)
	index := solsha3.SoliditySHA3(
		// types
		[]string{"address", "address"},

		// values
		[]interface{}{
			spender,
			tempStr,
		},
	)
	return common.BytesToHash(index)
}
