package bb

import (
	"bytes"
	"context"
	"math/big"
	"net/http"
	"testing"

	"github.com/KyberNetwork/trading-toolset/pkg/contracts/erc20"
	"github.com/KyberNetwork/trading-toolset/pkg/convert"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/require"
)

func computeAddrIntHash(addr common.Address, slot int64) common.Hash {
	addr32 := common.BytesToHash(addr[:])
	slot32 := common.LeftPadBytes(big.NewInt(slot).Bytes(), 32)
	return crypto.Keccak256Hash(addr32[:], slot32)
}

func computeAddrHashHash(addr common.Address, hash common.Hash) common.Hash {
	addr32 := common.BytesToHash(addr[:])
	return crypto.Keccak256Hash(addr32[:], hash[:])
}

func TestEncodeSlot(t *testing.T) {
	addr := book[WALLET]                 // ("0x54F42802c6B381682c48B530f234De0a896Af1DD")
	t.Log(computeAddrIntHash(addr, 101)) // balance slot

	hh1 := computeAddrIntHash(addr, 102) // allowances slot
	ksRouterAddress := common.HexToAddress("0x00555513Acf282B42882420E5e5bA87b44D8fA6E")
	t.Log(computeAddrHashHash(ksRouterAddress, hh1))
	t.Log(computeAddrHashHash(SimSwapAddress, hh1))
}
func TestEncodeBSCSlot(t *testing.T) {
	addr := book[WALLET] // ("0x54F42802c6B381682c48B530f234De0a896Af1DD")
	t.Log(computeAddrIntHash(addr, 1))

	hh1 := computeAddrIntHash(addr, 2) // allowances
	ksRouterAddress := common.HexToAddress("0x00555513Acf282B42882420E5e5bA87b44D8fA6E")
	t.Log(computeAddrHashHash(ksRouterAddress, hh1))
	t.Log(computeAddrHashHash(SimSwapAddress, hh1))
}

func TestCalAmount(t *testing.T) {
	amount := common.LeftPadBytes(convert.FloatToTokenAmount(1000, 18).Bytes(), 32)
	t.Log(hexutil.Encode(amount))
}

func TestSimcall(t *testing.T) {
	// https://etherscan.io/tx/0x606e8c8084855d3fb20cb1c69f520d0a1feae6c35a9d3659a9cda8a1cf53e9e2#eventlog
	rawurl := "http://localhost:8545" // ,"https://bsc.kyberengineering.io" // "https://ethereum.knstats.com/v1/mainnet/geth?appId=giang-app" // "http://localhost:8545/" //  "https://mainnet.infura.io/v3/3d85e3bded764846bc25e1ca36f73b91" // "https://proxy.kyberengineering.io/ethereum"
	client, err := ethclient.Dial(rawurl)
	require.NoError(t, err)
	block, err := client.BlockNumber(context.Background())
	require.NoError(t, err)
	t.Log("block", block)
	simClient, err := NewClient(rawurl, &http.Client{}, CommonContract)
	require.NoError(t, err)
	/*simCall, err := NewSimCall(SimSwapAddress, simClient)
	require.NoError(t, err)*/

	testToken, err := erc20.NewErc20(book[KNC], simClient)
	require.NoError(t, err)
	balance, err := testToken.BalanceOf(&bind.CallOpts{}, MyWallet)
	require.NoError(t, err)
	t.Log("balance", balance.String())
	allow, err := testToken.Allowance(&bind.CallOpts{}, MyWallet, book[KSROUTER])
	require.NoError(t, err)
	t.Log("allowance ", allow.String())

	ab, err := abi.JSON(bytes.NewBufferString(SimCallABI))
	require.NoError(t, err)
	swapData := hexutil.MustDecode("0xabcffc2600000000000000000000000041684b361557e9282e0373ca51260d9331e518c9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000840000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000054f42802c6b381682c48b530f234de0a896af1dd0000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000f5fd3f000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000041684b361557e9282e0373ca51260d9331e518c900000000000000000000000054f42802c6b381682c48b530f234de0a896af1dd00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000f5fd3f00000000000000000000000054f42802c6b381682c48b530f234de0a896af1dd0000000000000000000000000000000000000000000000000000000062f0c33400000000000000000000000000000000000000000000000000000000000005600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000061639d6ec06c13a96b5eb9560b359d7c648c7759000000000000000000000000defa4e8a7bcba345f687a2f1456f5edd9ce97202000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000041684b361557e9282e0373ca51260d9331e518c90000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000060100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c861d5dc44849c9c87b0856a2a311536205c96c7fd000100000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000020d0aebf0cf8c60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000000000000000000000000000000000120000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae460000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000108da0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000")
	data, err := ab.Pack("testSwap", book[KNC], book[USDT], book[KSROUTER], swapData)
	require.NoError(t, err)
	// deployedContract := common.HexToAddress("0x81926273bb7393340aba83f4acda4af47c0862d7")
	msg := ethereum.CallMsg{
		From:      MyWallet,
		To:        &SimSwapAddress,
		Gas:       1000000,
		GasPrice:  convert.FloatToTokenAmount(100, 9),
		GasFeeCap: convert.FloatToTokenAmount(100, 9),
		GasTipCap: convert.FloatToTokenAmount(100, 9),
		Value:     big.NewInt(0), // convert.FloatToTokenAmount(0.1, 18),
		Data:      data,
	}

	res, err := simClient.CallContract(context.Background(), msg, nil)
	require.NoError(t, err)
	t.Log(hexutil.Encode(res))
}
